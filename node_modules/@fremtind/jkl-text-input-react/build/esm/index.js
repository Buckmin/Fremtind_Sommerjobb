import React, { forwardRef, useState, useRef, useEffect } from 'react';
import crypto from 'crypto';
import { Label, SupportLabel } from '@fremtind/jkl-core';
import { IconButton } from '@fremtind/jkl-icon-button-react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var classnames = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if ( module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else {
		window.classNames = classNames;
	}
}());
});
var classnames_1 = classnames.named;

// This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped
// optimize the gzip compression for this alphabet.
let urlAlphabet =
  'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';

// We reuse buffers with the same size to avoid memory fragmentations
// for better performance.
let buffers = {};
let random = bytes => {
  let buffer = buffers[bytes];
  if (!buffer) {
    // `Buffer.allocUnsafe()` is faster because it doesnâ€™t flush the memory.
    // Memory flushing is unnecessary since the buffer allocation itself resets
    // the memory with the new bytes.
    buffer = Buffer.allocUnsafe(bytes);
    if (bytes <= 255) buffers[bytes] = buffer;
  }
  return crypto.randomFillSync(buffer)
};

let nanoid = (size = 21) => {
  let bytes = random(size);
  let id = '';
  // A compact alternative for `for (var i = 0; i < step; i++)`.
  while (size--) {
    // It is incorrect to use bytes exceeding the alphabet size.
    // The following mask reduces the random byte in the 0-255 value
    // range to the 0-63 value range. Therefore, adding hacks, such
    // as empty string fallback or magic numbers, is unneccessary because
    // the bitmask trims bytes down to the alphabet size.
    id += urlAlphabet[bytes[size] & 63];
  }
  return id
};

var TextArea = forwardRef(function (_ref, ref) {
  var id = _ref.id,
      variant = _ref.variant,
      inverted = _ref.inverted,
      label = _ref.label,
      className = _ref.className,
      helpLabel = _ref.helpLabel,
      errorLabel = _ref.errorLabel,
      _ref$rows = _ref.rows,
      rows = _ref$rows === void 0 ? 7 : _ref$rows,
      _ref$placeholder = _ref.placeholder,
      placeholder = _ref$placeholder === void 0 ? " " : _ref$placeholder,
      _ref$autoExpand = _ref.autoExpand,
      autoExpand = _ref$autoExpand === void 0 ? false : _ref$autoExpand,
      forceCompact = _ref.forceCompact,
      restProps = _objectWithoutProperties(_ref, ["id", "variant", "inverted", "label", "className", "helpLabel", "errorLabel", "rows", "placeholder", "autoExpand", "forceCompact"]);

  var componentClassName = classnames("jkl-text-input jkl-text-area", className, {
    "jkl-text-input--compact": forceCompact,
    "jkl-text-input--inverted": inverted
  });

  var _useState = useState(id || "jkl-text-area-".concat(nanoid(8))),
      _useState2 = _slicedToArray(_useState, 1),
      uid = _useState2[0];

  var _useState3 = useState("jkl-support-label-".concat(nanoid(8))),
      _useState4 = _slicedToArray(_useState3, 1),
      supportId = _useState4[0];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      textAreaFocused = _useState6[0],
      setTextAreaFocused = _useState6[1];

  var _useState7 = useState(0),
      _useState8 = _slicedToArray(_useState7, 2),
      baseScrollHeight = _useState8[0],
      setBaseScrollHeight = _useState8[1];

  var _useState9 = useState(1),
      _useState10 = _slicedToArray(_useState9, 2),
      currentRows = _useState10[0],
      setCurrentRows = _useState10[1];

  var internalRef = useRef(null);
  var textAreaRef = ref || internalRef;
  useEffect(function () {
    var textAreaElement = textAreaRef.current;

    if (autoExpand && textAreaElement) {
      var savedValue = textAreaElement.value;
      var savedPlaceholder = textAreaElement.placeholder;
      var savedRows = textAreaElement.rows; // BaseScrollHeight must be calculated from an empty textarea and empty placeholder.

      textAreaElement.value = "";
      textAreaElement.placeholder = "";
      textAreaElement.rows = 1;
      setBaseScrollHeight(textAreaElement.scrollHeight);
      textAreaElement.value = savedValue;
      textAreaElement.placeholder = savedPlaceholder;
      textAreaElement.rows = savedRows;
    }
  }, [textAreaRef, autoExpand]);
  useEffect(function () {
    var textAreaElement = textAreaRef.current;
    var minimumRows = rows;

    if (textAreaElement) {
      var calculatedRows = calculateRows(textAreaElement, baseScrollHeight);

      if (textAreaFocused || restProps.value) {
        setCurrentRows(Math.max(minimumRows, calculatedRows));
      } else {
        setCurrentRows(calculatedRows);
      }
    }
  }, [textAreaRef, restProps.value, textAreaFocused, baseScrollHeight, rows]);

  function onFocus(e) {
    setTextAreaFocused(true);
    restProps.onFocus && restProps.onFocus(e);
  }

  function onBlur(e) {
    setTextAreaFocused(false);
    restProps.onBlur && restProps.onBlur(e);
  }

  function calculateRows(textAreaElement, baseScrollHeight) {
    var lineHeightWithPx = window ? window.getComputedStyle(textAreaElement).lineHeight : "16px"; // Default to 16px

    var lineHeight = parseInt(lineHeightWithPx.replace("px", ""));
    var savedRows = textAreaElement.rows; // We need to set rows to 1 to shrink the textarea when removing characters.

    textAreaElement.rows = 1;
    var calculatedRows = Math.ceil((textAreaElement.scrollHeight - baseScrollHeight) / lineHeight) + 1;
    textAreaElement.rows = savedRows;
    return calculatedRows;
  }

  return /*#__PURE__*/React.createElement("div", {
    "data-testid": "jkl-text-area",
    className: componentClassName
  }, /*#__PURE__*/React.createElement(Label, {
    standAlone: true,
    htmlFor: uid,
    variant: variant,
    forceCompact: forceCompact
  }, label), /*#__PURE__*/React.createElement("textarea", _extends({
    id: uid,
    ref: textAreaRef,
    className: "jkl-text-input__input jkl-text-input__input--".concat(rows, "-rows"),
    onFocus: onFocus,
    onBlur: onBlur,
    "aria-invalid": !!errorLabel,
    "aria-describedby": supportId,
    placeholder: placeholder,
    rows: autoExpand ? currentRows : undefined // Must set overflowX hidden for Firefox https://stackoverflow.com/a/22700700
    ,
    style: autoExpand ? {
      height: "auto",
      overflowX: "hidden"
    } : undefined
  }, restProps)), /*#__PURE__*/React.createElement(SupportLabel, {
    inverted: inverted,
    id: supportId,
    helpLabel: helpLabel,
    errorLabel: errorLabel,
    forceCompact: forceCompact
  }));
});
TextArea.displayName = "TextArea";

function getWidthAsStyle(width, maxLength) {
  if (width) {
    return {
      width: width
    }; // prioritize width prop
  }

  if (maxLength) {
    // adapt to maxLength, but capped at 40ch
    var length = "".concat(Math.min(maxLength, 40), "ch");
    var padding = "24px"; // left + right padding

    return {
      width: "calc(".concat(length, " + ").concat(padding, ")")
    };
  }

  return undefined;
}

var BaseInputField = forwardRef(function (_ref, ref) {
  var id = _ref.id,
      describedBy = _ref.describedBy,
      invalid = _ref.invalid,
      maxLength = _ref.maxLength,
      width = _ref.width,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? "text" : _ref$type,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? "" : _ref$className,
      rest = _objectWithoutProperties(_ref, ["id", "describedBy", "invalid", "maxLength", "width", "type", "className"]);

  return /*#__PURE__*/React.createElement("input", _extends({
    ref: ref,
    id: id,
    className: "jkl-text-input__input ".concat(className),
    style: getWidthAsStyle(width, maxLength),
    "aria-describedby": describedBy,
    "aria-invalid": invalid,
    maxLength: maxLength,
    type: type
  }, rest));
});
BaseInputField.displayName = "BaseInputField";

var TextInput = forwardRef(function (_ref, ref) {
  var id = _ref.id,
      className = _ref.className,
      label = _ref.label,
      helpLabel = _ref.helpLabel,
      errorLabel = _ref.errorLabel,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? "medium" : _ref$variant,
      inline = _ref.inline,
      inverted = _ref.inverted,
      forceCompact = _ref.forceCompact,
      action = _ref.action,
      inputProps = _objectWithoutProperties(_ref, ["id", "className", "label", "helpLabel", "errorLabel", "variant", "inline", "inverted", "forceCompact", "action"]);

  var _useState = useState(id || "jkl-text-input-".concat(nanoid(8))),
      _useState2 = _slicedToArray(_useState, 1),
      uid = _useState2[0];

  var _useState3 = useState("jkl-support-label-".concat(nanoid(8))),
      _useState4 = _slicedToArray(_useState3, 1),
      supportId = _useState4[0];

  var hasSupportText = helpLabel || errorLabel;
  var describedBy = hasSupportText ? supportId : undefined;
  var componentClassName = classnames({
    "jkl-text-input": true,
    "jkl-text-input--inline": inline,
    "jkl-text-input--inverted": inverted,
    "jkl-text-input--compact": forceCompact,
    "jkl-text-input--action": action
  }, className);
  return /*#__PURE__*/React.createElement("div", {
    "data-testid": "jkl-text-input",
    className: componentClassName
  }, /*#__PURE__*/React.createElement(Label, {
    forceCompact: forceCompact,
    standAlone: true,
    srOnly: inline,
    htmlFor: uid,
    variant: variant
  }, label), /*#__PURE__*/React.createElement("div", {
    className: "jkl-text-input__input-wrapper"
  }, /*#__PURE__*/React.createElement(BaseInputField, _extends({
    ref: ref,
    id: uid,
    describedBy: describedBy,
    invalid: !!errorLabel
  }, inputProps)), action && /*#__PURE__*/React.createElement(IconButton, {
    className: "jkl-text-input__action-button",
    iconType: action.icon,
    buttonTitle: action.label,
    onClick: action.onClick,
    onFocus: action.onFocus,
    onBlur: action.onBlur
  })), /*#__PURE__*/React.createElement(SupportLabel, {
    inverted: inverted,
    id: supportId,
    helpLabel: helpLabel,
    errorLabel: errorLabel,
    srOnly: inline
  }));
});
TextInput.displayName = "TextInput";

export { BaseInputField, TextArea, TextInput };
