'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var CoreToggle = _interopDefault(require('@nrk/core-toggle/jsx'));
var React = require('react');
var React__default = _interopDefault(React);
var crypto = _interopDefault(require('crypto'));
var jklCore = require('@fremtind/jkl-core');
var jklReactHooks = require('@fremtind/jkl-react-hooks');

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped
// optimize the gzip compression for this alphabet.
let urlAlphabet =
  'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';

// We reuse buffers with the same size to avoid memory fragmentations
// for better performance.
let buffers = {};
let random = bytes => {
  let buffer = buffers[bytes];
  if (!buffer) {
    // `Buffer.allocUnsafe()` is faster because it doesnâ€™t flush the memory.
    // Memory flushing is unnecessary since the buffer allocation itself resets
    // the memory with the new bytes.
    buffer = Buffer.allocUnsafe(bytes);
    if (bytes <= 255) buffers[bytes] = buffer;
  }
  return crypto.randomFillSync(buffer)
};

let nanoid = (size = 21) => {
  let bytes = random(size);
  let id = '';
  // A compact alternative for `for (var i = 0; i < step; i++)`.
  while (size--) {
    // It is incorrect to use bytes exceeding the alphabet size.
    // The following mask reduces the random byte in the 0-255 value
    // range to the 0-63 value range. Therefore, adding hacks, such
    // as empty string fallback or magic numbers, is unneccessary because
    // the bitmask trims bytes down to the alphabet size.
    id += urlAlphabet[bytes[size] & 63];
  }
  return id
};

function useListNavigation() {
  var typeAheadIsEnabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var listRef = React.useRef(null);
  var search;
  var searchResetTimer;

  if (typeAheadIsEnabled) {
    search = {
      keys: ""
    }; // keypress buffer is object to preserve state
  }

  React.useEffect(function () {
    var list = listRef.current;

    if (list) {
      list.addEventListener("keydown", function (event) {
        return handleListKeyNav({
          list: list,
          event: event,
          search: search,
          searchResetTimer: searchResetTimer
        });
      });
    }

    return function () {
      if (list) {
        list.removeEventListener("keydown", function (event) {
          return handleListKeyNav({
            list: list,
            event: event,
            search: search,
            searchResetTimer: searchResetTimer
          });
        });
      }
    };
  }, [search, searchResetTimer]);
  return listRef;
}

function handleMoveTo(direction, _ref) {
  var event = _ref.event,
      list = _ref.list,
      currentFocus = _ref.currentFocus;
  event.preventDefault();
  moveFocusTo(direction, list, currentFocus);
}

function handleListKeyNav(_ref2) {
  var list = _ref2.list,
      event = _ref2.event,
      search = _ref2.search,
      searchResetTimer = _ref2.searchResetTimer;
  var moveFunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : handleMoveTo;
  var key = event.key,
      target = event.target;
  var currentFocus = target;
  var moveDetails = {
    event: event,
    list: list,
    currentFocus: currentFocus
  };

  switch (key) {
    case "ArrowUp" :
      moveFunction("prev", moveDetails);
      break;

    case "ArrowDown" :
      moveFunction("next", moveDetails);
      break;

    case "Home":
      moveFunction("first", moveDetails);
      break;

    case "End":
      moveFunction("last", moveDetails);
      break;

    case "Tab":
      // in a standard select, tab does nothing in-menu
      event.preventDefault();
      break;

    case "Enter" :
      break;

    default:
      if (search !== undefined) {
        var searchResult = findItem({
          list: list,
          key: key,
          search: search,
          searchResetTimer: searchResetTimer
        });

        if (searchResult) {
          searchResult.focus();
        }
      }

      break;
  }
}

function moveFocusTo(direction, list, current) {
  var thisLI = current.parentElement;

  switch (direction) {
    case "prev":
      var prevLI = thisLI && thisLI.previousElementSibling;

      if (prevLI) {
        var prevItem = prevLI.querySelector("[role=\"option\"]");

        if (prevItem) {
          prevItem.focus();
        }
      }

      break;

    case "next":
      var nextLI = thisLI && thisLI.nextElementSibling;

      if (nextLI) {
        var nextItem = nextLI.querySelector("[role=\"option\"]");

        if (nextItem) {
          nextItem.focus();
        }
      }

      break;

    case "first":
      var firstItem = list.querySelector("[role=\"option\"]");

      if (firstItem) {
        firstItem.focus();
      }

      break;

    case "last":
      var listItems = list.querySelectorAll("[role=\"option\"]");

      if (listItems.length) {
        listItems[listItems.length - 1].focus();
      }

      break;
  }
}

function findItem(_ref3) {
  var list = _ref3.list,
      key = _ref3.key,
      search = _ref3.search,
      searchResetTimer = _ref3.searchResetTimer;
  var listItems = list.querySelectorAll("[role=\"option\"]");
  if (!listItems.length) return null;

  if (search) {
    search.keys = search.keys.concat(key);
    resetWhenIdle(search, searchResetTimer);

    for (var n = 0; n < listItems.length; n++) {
      var label = listItems[n].innerText;

      if (label && label.toLowerCase().indexOf(search.keys) === 0) {
        return listItems[n];
      }
    }
  }

  return null;
}

function resetWhenIdle(search, timer) {
  if (timer) {
    clearTimeout(timer);
    timer = undefined;
  }

  timer = setTimeout(function () {
    search ? search.keys = "" : search = {
      keys: ""
    };
    timer = undefined;
  }, 500, search, timer);
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var classnames = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if ( module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else {
		window.classNames = classNames;
	}
}());
});
var classnames_1 = classnames.named;

function ExpandArrow(_ref) {
  var _ref$expanded = _ref.expanded,
      expanded = _ref$expanded === void 0 ? false : _ref$expanded,
      className = _ref.className;
  var componentClassName = classnames({
    "jkl-expand-arrow": true,
    "jkl-expand-arrow--expanded": expanded
  }, className);
  return /*#__PURE__*/React__default.createElement("span", {
    className: componentClassName
  }, /*#__PURE__*/React__default.createElement("svg", {
    className: "jkl-expand-arrow__down",
    viewBox: "0 0 13 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M6.90762 13.8828L11.9272 8.86326L12.7093 9.64537L6.35463 16L-1.68645e-06 9.64536L0.782101 8.86326L5.80156 13.8827L5.80156 1.01438e-06L6.90762 1.20777e-06L6.90762 13.8828Z",
    fill: "currentColor"
  })), /*#__PURE__*/React__default.createElement("svg", {
    className: "jkl-expand-arrow__up",
    viewBox: "0 0 13 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M5.80163 2.1172L0.78209 7.13674L-1.29938e-05 6.35464L6.35462 5.14415e-08L12.7093 6.35464L11.9272 7.13674L6.90769 2.11728L6.9077 16L5.80163 16L5.80163 2.1172Z",
    fill: "currentColor"
  })));
}

function toLower() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  return str.toLowerCase().replace(/[\W_]+/g, ""); // strip all non-alphanumeric chars
}

function focusSelected(listEl, listId, selected) {
  var focusedItem;

  if (selected !== undefined) {
    // move focus to selected option
    focusedItem = listEl.querySelector("#".concat(listId, "__").concat(toLower(selected)));
  } else {
    // move focus to first option
    focusedItem = listEl.querySelector('[role="option"]');
  }

  focusedItem && focusedItem.focus();
}

function Select(_ref) {
  var id = _ref.id,
      items = _ref.items,
      value = _ref.value,
      label = _ref.label,
      onChange = _ref.onChange,
      onBlur = _ref.onBlur,
      onFocus = _ref.onFocus,
      className = _ref.className,
      helpLabel = _ref.helpLabel,
      errorLabel = _ref.errorLabel,
      _ref$inline = _ref.inline,
      inline = _ref$inline === void 0 ? false : _ref$inline,
      _ref$defaultPrompt = _ref.defaultPrompt,
      defaultPrompt = _ref$defaultPrompt === void 0 ? "Velg" : _ref$defaultPrompt,
      variant = _ref.variant,
      forceCompact = _ref.forceCompact,
      inverted = _ref.inverted,
      width = _ref.width,
      selectProps = _objectWithoutProperties(_ref, ["id", "items", "value", "label", "onChange", "onBlur", "onFocus", "className", "helpLabel", "errorLabel", "inline", "defaultPrompt", "variant", "forceCompact", "inverted", "width"]);

  var _useState = React.useState(value),
      _useState2 = _slicedToArray(_useState, 2),
      selectedValue = _useState2[0],
      setSelectedValue = _useState2[1];

  var _useState3 = React.useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      internalFocus = _useState4[0],
      setInternalFocus = _useState4[1];

  var hasSelectedValue = typeof selectedValue !== "undefined" && selectedValue !== "";
  var getLabelFromValue = React.useCallback(function (value) {
    var matchingItem = items.map(jklCore.getValuePair).filter(function (item) {
      return item.value === value;
    })[0];
    return matchingItem && matchingItem.label;
  }, [items]);

  var _useState5 = React.useState(getLabelFromValue(value)),
      _useState6 = _slicedToArray(_useState5, 2),
      displayedValue = _useState6[0],
      setDisplayedValue = _useState6[1];

  var _useState7 = React.useState(false),
      _useState8 = _slicedToArray(_useState7, 2),
      dropdownIsShown = _useState8[0],
      setShown = _useState8[1];

  var _useState9 = React.useState(id || "jkl-select-".concat(nanoid(8))),
      _useState10 = _slicedToArray(_useState9, 1),
      listId = _useState10[0];

  var listRef = useListNavigation();
  var componentClassName = classnames("jkl-select", className, {
    "jkl-select--inline": inline,
    "jkl-select--compact": forceCompact,
    "jkl-select--inverted": inverted,
    "jkl-select--open": dropdownIsShown,
    "jkl-select--no-value": !hasSelectedValue,
    "jkl-select--invalid": !!errorLabel
  });

  function onToggle() {
    var opening = !dropdownIsShown;
    setShown(!dropdownIsShown);

    if (opening) {
      var listElement = listRef.current;
      listElement && focusSelected(listElement, listId, selectedValue);
    }
  }

  function onToggleSelect(e) {
    e.target.value = e.detail;
    var nextValue = e.detail.value;
    setDisplayedValue(e.detail.textContent);
    setSelectedValue(nextValue);
    onChange && onChange(nextValue);
    e.target.hidden = true;
    setInternalFocus(true);
    e.target.button.focus();
  }

  function handleBlur() {
    if (!dropdownIsShown && onBlur) {
      onBlur(value);
    }
  }

  function handleFocus() {
    if (onFocus && !internalFocus) {
      onFocus(value);
    }

    setInternalFocus(false);
  }

  React.useEffect(function () {
    setSelectedValue(value);
    setDisplayedValue(getLabelFromValue(value));
  }, [value, items, getLabelFromValue]);

  var _useAnimatedHeight = jklReactHooks.useAnimatedHeight(dropdownIsShown),
      _useAnimatedHeight2 = _slicedToArray(_useAnimatedHeight, 1),
      elementRef = _useAnimatedHeight2[0];

  return /*#__PURE__*/React__default.createElement("div", _extends({
    "data-testid": "jkl-select",
    className: componentClassName,
    style: {
      width: width
    }
  }, selectProps), /*#__PURE__*/React__default.createElement(jklCore.Label, {
    variant: variant,
    forceCompact: forceCompact,
    srOnly: inline
  }, label), /*#__PURE__*/React__default.createElement("div", {
    className: "jkl-select__outer-wrapper"
  }, /*#__PURE__*/React__default.createElement("button", {
    type: "button",
    className: "jkl-select__button",
    "data-testid": "jkl-select__button",
    "aria-haspopup": "listbox",
    onBlur: handleBlur,
    onFocus: handleFocus
  }, hasSelectedValue ? displayedValue : defaultPrompt), /*#__PURE__*/React__default.createElement(CoreToggle, {
    id: listId,
    ref: elementRef,
    role: "listbox",
    className: "jkl-select__options-menu",
    popup: label,
    hidden: !dropdownIsShown,
    onToggle: onToggle,
    onToggleSelect: onToggleSelect,
    "aria-activedescendant": hasSelectedValue && "".concat(listId, "__").concat(toLower(selectedValue))
  }, /*#__PURE__*/React__default.createElement("ul", {
    className: "jkl-select__option-wrapper",
    "data-testid": "jkl-select__option-wrapper",
    tabIndex: -1,
    ref: listRef
  }, items.map(jklCore.getValuePair).map(function (item, i) {
    return /*#__PURE__*/React__default.createElement("li", {
      key: item.value
    }, /*#__PURE__*/React__default.createElement("button", {
      type: "button",
      id: "".concat(listId, "__").concat(toLower(item.value)),
      className: "jkl-select__option",
      "data-testid": "jkl-select__option",
      "aria-selected": item.value === selectedValue,
      role: "option",
      value: item.value,
      "data-testautoid": "jkl-select__option-".concat(i)
    }, item.label));
  }))), /*#__PURE__*/React__default.createElement(ExpandArrow, {
    className: "jkl-select__arrow",
    expanded: dropdownIsShown
  })), /*#__PURE__*/React__default.createElement(jklCore.SupportLabel, {
    inverted: inverted,
    helpLabel: helpLabel,
    errorLabel: errorLabel,
    forceCompact: forceCompact
  }));
}

var NativeSelect = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var id = _ref.id,
      label = _ref.label,
      items = _ref.items,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? "" : _ref$className,
      _ref$inline = _ref.inline,
      inline = _ref$inline === void 0 ? false : _ref$inline,
      helpLabel = _ref.helpLabel,
      errorLabel = _ref.errorLabel,
      variant = _ref.variant,
      placeholder = _ref.placeholder,
      value = _ref.value,
      forceCompact = _ref.forceCompact,
      inverted = _ref.inverted,
      onChange = _ref.onChange,
      onBlur = _ref.onBlur,
      onFocus = _ref.onFocus;

  // If no value is given, set it to first item, or to empty string if there is a placeholder
  if (!value) {
    if (!placeholder && items.length) {
      value = jklCore.getValuePair(items[0]).value;
    }
  }

  var componentClassName = classnames("jkl-select", className, {
    "jkl-select--inline": inline,
    "jkl-select--compact": forceCompact,
    "jkl-select--inverted": inverted,
    "jkl-select--invalid": !!errorLabel
  });
  var defaultValue = value ? undefined : "";

  var _useState = React.useState(id || "jkl-select-".concat(nanoid(8))),
      _useState2 = _slicedToArray(_useState, 1),
      uid = _useState2[0];

  return /*#__PURE__*/React__default.createElement("div", {
    "data-testid": "jkl-select",
    className: componentClassName
  }, /*#__PURE__*/React__default.createElement(jklCore.Label, {
    standAlone: true,
    htmlFor: uid,
    variant: variant,
    forceCompact: forceCompact
  }, label), /*#__PURE__*/React__default.createElement("div", {
    className: "jkl-select__outer-wrapper"
  }, /*#__PURE__*/React__default.createElement("select", {
    ref: ref,
    id: uid,
    value: value,
    defaultValue: defaultValue,
    className: "jkl-select__button",
    onChange: onChange,
    onBlur: onBlur || onChange,
    onFocus: onFocus
  }, placeholder && !value && /*#__PURE__*/React__default.createElement("option", {
    disabled: true,
    value: ""
  }, placeholder), items.map(jklCore.getValuePair).map(function (item) {
    return /*#__PURE__*/React__default.createElement("option", {
      "data-testid": "jkl-select__option",
      className: "jkl-select__option",
      key: item.value,
      value: item.value
    }, item.label);
  })), /*#__PURE__*/React__default.createElement(ExpandArrow, {
    className: "jkl-select__arrow"
  })), /*#__PURE__*/React__default.createElement(jklCore.SupportLabel, {
    helpLabel: helpLabel,
    errorLabel: errorLabel,
    forceCompact: forceCompact
  }));
});

exports.NativeSelect = NativeSelect;
exports.Select = Select;
