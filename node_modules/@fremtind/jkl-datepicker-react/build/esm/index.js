import React, { forwardRef, useState, useRef, useEffect, useCallback } from 'react';
import crypto from 'crypto';
import { Label, SupportLabel } from '@fremtind/jkl-core';
import { TextInput, BaseInputField } from '@fremtind/jkl-text-input-react';
import { useAnimatedHeight, useClickOutside, useKeyListener } from '@fremtind/jkl-react-hooks';
import { IconButton } from '@fremtind/jkl-icon-button-react';
import CoreDatepicker from '@nrk/core-datepicker/jsx';
import { NativeSelect } from '@fremtind/jkl-select-react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped
// optimize the gzip compression for this alphabet.
let urlAlphabet =
  'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';

// We reuse buffers with the same size to avoid memory fragmentations
// for better performance.
let buffers = {};
let random = bytes => {
  let buffer = buffers[bytes];
  if (!buffer) {
    // `Buffer.allocUnsafe()` is faster because it doesn’t flush the memory.
    // Memory flushing is unnecessary since the buffer allocation itself resets
    // the memory with the new bytes.
    buffer = Buffer.allocUnsafe(bytes);
    if (bytes <= 255) buffers[bytes] = buffer;
  }
  return crypto.randomFillSync(buffer)
};

let nanoid = (size = 21) => {
  let bytes = random(size);
  let id = '';
  // A compact alternative for `for (var i = 0; i < step; i++)`.
  while (size--) {
    // It is incorrect to use bytes exceeding the alphabet size.
    // The following mask reduces the random byte in the 0-255 value
    // range to the 0-63 value range. Therefore, adding hacks, such
    // as empty string fallback or magic numbers, is unneccessary because
    // the bitmask trims bytes down to the alphabet size.
    id += urlAlphabet[bytes[size] & 63];
  }
  return id
};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var classnames = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if ( module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else {
		window.classNames = classNames;
	}
}());
});
var classnames_1 = classnames.named;

var Calendar = forwardRef(function (_ref, ref) {
  var hidden = _ref.hidden,
      extended = _ref.extended,
      forceCompact = _ref.forceCompact,
      inverted = _ref.inverted,
      onClickDate = _ref.onClickDate,
      currentDate = _ref.currentDate,
      _ref$monthLabel = _ref.monthLabel,
      monthLabel = _ref$monthLabel === void 0 ? "Måned" : _ref$monthLabel,
      _ref$yearLabel = _ref.yearLabel,
      yearLabel = _ref$yearLabel === void 0 ? "År" : _ref$yearLabel,
      days = _ref.days,
      months = _ref.months,
      disableDate = _ref.disableDate;
  var componentClassName = classnames("jkl-calendar", {
    "jkl-calendar--hidden": hidden,
    "jkl-calendar--extended": extended,
    "jkl-calendar--inverted": inverted
  });
  return /*#__PURE__*/React.createElement(CoreDatepicker, {
    timestamp: currentDate ? currentDate.getTime() : new Date(),
    months: months,
    days: days,
    onDatepickerClickDay: onClickDate,
    disabled: disableDate,
    forwardRef: ref,
    className: componentClassName
  }, /*#__PURE__*/React.createElement("div", {
    className: "jkl-calendar__padding"
  }, extended && /*#__PURE__*/React.createElement("div", {
    className: "jkl-calendar__navigation"
  }, /*#__PURE__*/React.createElement(TextInput, {
    inverted: inverted,
    label: yearLabel,
    type: "year",
    className: "jkl-calendar__year-selector",
    width: "5rem",
    variant: "small",
    forceCompact: forceCompact
  }), /*#__PURE__*/React.createElement(NativeSelect, {
    inverted: inverted,
    className: "jkl-calendar__month-selector",
    label: monthLabel,
    items: [],
    variant: "small",
    forceCompact: forceCompact
  })), !extended && /*#__PURE__*/React.createElement("fieldset", {
    className: "jkl-calendar__month-navigation"
  }, /*#__PURE__*/React.createElement("button", {
    title: "forrige m\xE5ned",
    "aria-label": "forrige m\xE5ned",
    className: "jkl-calendar__month-button",
    value: "- 1 month"
  }, "\u2190"), /*#__PURE__*/React.createElement("button", {
    title: "neste m\xE5ned",
    "aria-label": "neste m\xE5ned",
    className: "jkl-calendar__month-button jkl-calendar__month-button--right",
    value: "+ 1 month"
  }, "\u2192")), /*#__PURE__*/React.createElement("table", {
    "data-testid": "jkl-datepicker-calendar"
  })));
});
Calendar.displayName = "Calendar";

var dayMonthYearRegex = /^(\d\d)\.(\d\d)\.(\d{4})/;
/**
 * Check if two Date objects represent the same day
 *
 * @param date1 first Date to compare
 * @param date2 second Date to compare
 */

function isSameDay(date1, date2) {
  return date1.getDate() === date2.getDate() && date1.getMonth() === date2.getMonth() && date1.getFullYear() === date2.getFullYear();
}
/**
 * Format a Date object as a string
 *
 * @param date the Date object to format
 * @return returns a date with "dd.mm.yyyy"-format
 */

function formatDate(date) {
  var day = "".concat(date.getDate()).padStart(2, "0");
  var month = "".concat(date.getMonth() + 1).padStart(2, "0");
  return "".concat(day, ".").concat(month, ".").concat(date.getFullYear());
}
/**
 * Convert a date string to a Date object
 *
 * @param dateString date as string with format dd.mm.yyyy
 * @return a Date object representing the given date
 */

function parseDateString(dateString) {
  var match = dayMonthYearRegex.exec(dateString);

  if (!match) {
    return;
  }

  var day = parseInt(match[1], 10);
  var month = parseInt(match[2], 10) - 1;
  var year = parseInt(match[3], 10);
  return new Date(year, month, day, 0, 0, 0);
}

function DatePicker(_ref) {
  var _ref$label = _ref.label,
      label = _ref$label === void 0 ? "Velg dato" : _ref$label,
      _ref$placeholder = _ref.placeholder,
      placeholder = _ref$placeholder === void 0 ? "dd.mm.åååå" : _ref$placeholder,
      calendarButtonTitle = _ref.calendarButtonTitle,
      _ref$showCalendarLabe = _ref.showCalendarLabel,
      showCalendarLabel = _ref$showCalendarLabe === void 0 ? calendarButtonTitle || "Åpne kalender" : _ref$showCalendarLabe,
      _ref$hideCalendarLabe = _ref.hideCalendarLabel,
      hideCalendarLabel = _ref$hideCalendarLabe === void 0 ? calendarButtonTitle || "Lukk kalender" : _ref$hideCalendarLabe,
      initialDate = _ref.initialDate,
      onChange = _ref.onChange,
      onBlur = _ref.onBlur,
      onFocus = _ref.onFocus,
      _ref$initialShow = _ref.initialShow,
      initialShow = _ref$initialShow === void 0 ? false : _ref$initialShow,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? "" : _ref$className,
      forceCompact = _ref.forceCompact,
      inverted = _ref.inverted,
      disableBeforeDate = _ref.disableBeforeDate,
      disableAfterDate = _ref.disableAfterDate,
      variant = _ref.variant,
      helpLabel = _ref.helpLabel,
      errorLabel = _ref.errorLabel,
      calendarProps = _objectWithoutProperties(_ref, ["label", "placeholder", "calendarButtonTitle", "showCalendarLabel", "hideCalendarLabel", "initialDate", "onChange", "onBlur", "onFocus", "initialShow", "className", "forceCompact", "inverted", "disableBeforeDate", "disableAfterDate", "variant", "helpLabel", "errorLabel"]);

  if (calendarButtonTitle && process.env.NODE_ENV !== "production") {
    console.warn("WARNING: For better usability, please supply separate button titles for showing/hiding the calendar, using the showCalendarLabel and hideCalendarLabel props respectively. The calendarButtonTitle prop is deprecated and will be removed in a future update.");
  }

  var _useState = useState("jkl-datepicker-".concat(nanoid(8))),
      _useState2 = _slicedToArray(_useState, 1),
      inputId = _useState2[0];

  var _useState3 = useState("jkl-support-label-".concat(nanoid(8))),
      _useState4 = _slicedToArray(_useState3, 1),
      supportLabelId = _useState4[0];

  var _useState5 = useState(initialDate),
      _useState6 = _slicedToArray(_useState5, 2),
      date = _useState6[0],
      setDate = _useState6[1];

  var _useState7 = useState(!initialShow),
      _useState8 = _slicedToArray(_useState7, 2),
      calendarHidden = _useState8[0],
      setCalendarHidden = _useState8[1];

  var _useState9 = useState(initialDate ? formatDate(initialDate) : ""),
      _useState10 = _slicedToArray(_useState9, 2),
      dateString = _useState10[0],
      setDateString = _useState10[1];

  var componentClassName = classnames("jkl-datepicker", {
    "jkl-datepicker--open": !calendarHidden,
    "jkl-datepicker--inverted": inverted
  }, className);
  var inputWrapperClassName = classnames("jkl-datepicker__input-wrapper jkl-text-input__input-wrapper", {
    "jkl-text-input--compact": forceCompact,
    "jkl-text-input--inverted": inverted
  });
  var componentRef = useRef(null);
  var inputRef = useRef(null);

  var _useAnimatedHeight = useAnimatedHeight(!calendarHidden),
      _useAnimatedHeight2 = _slicedToArray(_useAnimatedHeight, 1),
      calendarRef = _useAnimatedHeight2[0];

  useClickOutside(calendarRef, function () {
    !calendarHidden && setCalendarHidden(true);
  });
  useKeyListener(calendarRef, ["Escape"], function () {
    !calendarHidden && setCalendarHidden(true);
    inputRef.current && inputRef.current.focus();
  });
  useEffect(function () {
    disableAfterDate && disableAfterDate.setHours(23, 59, 59, 999);
    var now = new Date();

    if (disableAfterDate && now > disableAfterDate) {
      setDate(disableAfterDate);
    }

    if (disableBeforeDate && now < disableBeforeDate) {
      setDate(disableBeforeDate);
    }
  }, [disableBeforeDate, disableAfterDate]);
  useEffect(function () {
    setDateString(initialDate ? formatDate(initialDate) : "");
    setDate(initialDate);
  }, [initialDate]);

  var toggleCalendar = function toggleCalendar() {
    var wasHidden = calendarHidden;
    setCalendarHidden(!calendarHidden);

    if (wasHidden) {
      var calendarEl = calendarRef.current;
      var button = calendarEl && calendarEl.querySelector("[autofocus]");
      button && setTimeout(function () {
        return button.focus();
      }, 100);
    }
  };

  var toggleCalendarWithoutFocus = useCallback(function () {
    return setCalendarHidden(!calendarHidden);
  }, [calendarHidden]);
  useEffect(function () {
    var inputEl = inputRef.current;
    inputEl && inputEl.addEventListener("click", toggleCalendarWithoutFocus);
    return function () {
      inputEl && inputEl.removeEventListener("click", toggleCalendarWithoutFocus);
    };
  }, [toggleCalendarWithoutFocus]);

  var handleBlur = function handleBlur(e) {
    var nextFocusIsInside = componentRef.current && componentRef.current.contains(e.relatedTarget);

    if (onBlur && !nextFocusIsInside) {
      onBlur(date);
    }
  };

  var handleFocus = function handleFocus(e) {
    var prevFocusIsInside = componentRef.current && componentRef.current.contains(e.relatedTarget);

    if (onFocus && !prevFocusIsInside) {
      onFocus(date);
    }
  };

  function dateHasChanged(date, newDate) {
    return !date || !isSameDay(date, newDate);
  }

  function handleChange(event) {
    var newDateString = event.target.value;
    var newDate = parseDateString(newDateString); // Only set the date if it is a valid date

    if (newDate && dateHasChanged(date, newDate)) {
      setDate(newDate);

      if (onChange) {
        onChange(newDate);
      }
    } else if (newDateString === "") {
      setDate(undefined);

      if (onChange) {
        onChange(undefined);
      }
    }

    setDateString(newDateString);
  }

  function onClickCalendarDay(event) {
    var newDate = event.target.date;

    if (dateHasChanged(date, newDate)) {
      setDateString(formatDate(newDate));
      setDate(newDate);

      if (onChange) {
        onChange(newDate);
      }
    }

    setCalendarHidden(true);
    inputRef.current && inputRef.current.focus();
  }

  function disableDate(date) {
    return disableAfterDate && date > disableAfterDate || disableBeforeDate && date < disableBeforeDate;
  }

  return /*#__PURE__*/React.createElement("div", {
    className: componentClassName,
    ref: componentRef
  }, /*#__PURE__*/React.createElement(Label, {
    standAlone: true,
    htmlFor: inputId,
    variant: variant
  }, label), /*#__PURE__*/React.createElement("div", {
    className: inputWrapperClassName
  }, /*#__PURE__*/React.createElement(BaseInputField, {
    ref: inputRef,
    id: inputId,
    describedBy: supportLabelId,
    invalid: !!errorLabel,
    className: "jkl-datepicker__input jkl-text-input__input",
    "data-testid": "jkl-datepicker__input",
    value: dateString,
    onFocus: handleFocus,
    onBlur: handleBlur,
    onChange: handleChange,
    placeholder: placeholder,
    width: "11.5rem"
  }), /*#__PURE__*/React.createElement(IconButton, {
    className: "jkl-text-input__action-button",
    iconType: "calendar",
    buttonTitle: calendarHidden ? showCalendarLabel : hideCalendarLabel,
    onClick: toggleCalendar,
    onFocus: handleFocus,
    onBlur: handleBlur
  }), /*#__PURE__*/React.createElement("div", {
    className: "jkl-datepicker__calendar-wrapper"
  }, /*#__PURE__*/React.createElement(Calendar, _extends({
    currentDate: date,
    onClickDate: onClickCalendarDay,
    disableDate: disableDate,
    hidden: calendarHidden,
    inverted: inverted,
    forceCompact: forceCompact,
    ref: calendarRef
  }, calendarProps)))), /*#__PURE__*/React.createElement(SupportLabel, {
    inverted: inverted,
    id: supportLabelId,
    helpLabel: helpLabel,
    errorLabel: errorLabel
  }));
}

export { DatePicker };
