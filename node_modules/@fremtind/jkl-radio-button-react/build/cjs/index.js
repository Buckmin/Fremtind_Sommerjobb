'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var jklFieldGroupReact = require('@fremtind/jkl-field-group-react');
var jklCore = require('@fremtind/jkl-core');

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var classnames = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if ( module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else {
		window.classNames = classNames;
	}
}());
});
var classnames_1 = classnames.named;

var RadioButtonOption = function RadioButtonOption(_ref) {
  var value = _ref.value,
      label = _ref.label,
      onChange = _ref.onChange,
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? "" : _ref$name,
      _ref$inline = _ref.inline,
      inline = _ref$inline === void 0 ? false : _ref$inline,
      checked = _ref.checked,
      _ref$invalid = _ref.invalid,
      invalid = _ref$invalid === void 0 ? false : _ref$invalid,
      forceCompact = _ref.forceCompact,
      inverted = _ref.inverted;
  return /*#__PURE__*/React.createElement("label", {
    "data-testid": "jkl-radio-button__label-tag",
    className: classnames("jkl-radio-button", {
      "jkl-radio-button--compact": forceCompact,
      "jkl-radio-button--inline": inline,
      "jkl-radio-button--error": invalid,
      "jkl-radio-button--inverted": inverted
    })
  }, /*#__PURE__*/React.createElement("input", {
    className: "jkl-radio-button__input",
    type: "radio",
    name: name,
    value: value,
    onChange: onChange,
    checked: checked,
    "aria-invalid": invalid
  }), /*#__PURE__*/React.createElement("span", {
    className: "jkl-radio-button__dot"
  }), /*#__PURE__*/React.createElement("span", {
    className: "jkl-radio-button__label"
  }, label));
};

var RadioButtons = function RadioButtons(_ref) {
  var name = _ref.name,
      legend = _ref.legend,
      choices = _ref.choices,
      selectedValue = _ref.selectedValue,
      onChange = _ref.onChange,
      _ref$inline = _ref.inline,
      inline = _ref$inline === void 0 ? false : _ref$inline,
      helpLabel = _ref.helpLabel,
      errorLabel = _ref.errorLabel,
      variant = _ref.variant,
      forceCompact = _ref.forceCompact,
      className = _ref.className,
      inverted = _ref.inverted;
  return /*#__PURE__*/React.createElement(jklFieldGroupReact.FieldGroup, {
    legend: legend,
    helpLabel: helpLabel,
    errorLabel: errorLabel,
    variant: variant,
    forceCompact: forceCompact,
    className: className
  }, choices.map(jklCore.getValuePair).map(function (_ref2) {
    var label = _ref2.label,
        value = _ref2.value;
    return /*#__PURE__*/React.createElement(RadioButtonOption, {
      key: value,
      name: name,
      value: value,
      label: label,
      inline: inline,
      checked: value === selectedValue,
      onChange: onChange,
      invalid: !!errorLabel,
      forceCompact: forceCompact,
      inverted: inverted
    });
  }));
};

exports.RadioButtonOption = RadioButtonOption;
exports.RadioButtons = RadioButtons;
