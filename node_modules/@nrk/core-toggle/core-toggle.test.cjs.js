'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fs = _interopDefault(require('fs'));
var path = _interopDefault(require('path'));

function prop(selector, name) {
  return browser.executeScript(function (selector, name) {
    return String((document.querySelector(selector) || {})[name]);
  }, selector, name);
}
function attr(selector, name) {
  return browser.executeScript(function (selector, name) {
    return String(document.querySelector(selector).getAttribute(name));
  }, selector, name);
}

var coreToggle = fs.readFileSync(path.resolve(__dirname, 'core-toggle.min.js'), 'utf-8');
var customElements = fs.readFileSync(require.resolve('@webcomponents/custom-elements'), 'utf-8');
describe('core-toggle', function () {
  beforeEach(function _callee() {
    return regeneratorRuntime.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return regeneratorRuntime.awrap(browser.refresh());

          case 2:
            _context.next = 4;
            return regeneratorRuntime.awrap(browser.executeScript(customElements));

          case 4:
            _context.next = 6;
            return regeneratorRuntime.awrap(browser.executeScript(coreToggle));

          case 6:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('sets up all properties', function _callee2() {
    var toggleId, buttonId;
    return regeneratorRuntime.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <button>Toggle</button>\n        <core-toggle hidden></core-toggle>\n      ";
            }));

          case 2:
            _context2.next = 4;
            return regeneratorRuntime.awrap(expect(attr('button', 'aria-expanded')).toMatch(/null|false/));

          case 4:
            _context2.next = 6;
            return regeneratorRuntime.awrap(attr('core-toggle', 'id'));

          case 6:
            toggleId = _context2.sent;
            _context2.next = 9;
            return regeneratorRuntime.awrap(expect(attr('button', 'aria-controls')).toEqual(toggleId));

          case 9:
            _context2.next = 11;
            return regeneratorRuntime.awrap(expect(prop('core-toggle', 'hidden')).toMatch(/true/i));

          case 11:
            _context2.next = 13;
            return regeneratorRuntime.awrap(attr('button', 'id'));

          case 13:
            buttonId = _context2.sent;
            _context2.next = 16;
            return regeneratorRuntime.awrap(expect(attr('core-toggle', 'aria-labelledby')).toEqual(buttonId));

          case 16:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  it('opens and closes toggle', function _callee3() {
    return regeneratorRuntime.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <button>Toggle</button>\n        <core-toggle hidden></core-toggle>\n      ";
            }));

          case 2:
            _context3.next = 4;
            return regeneratorRuntime.awrap($('button').click());

          case 4:
            _context3.next = 6;
            return regeneratorRuntime.awrap(expect(attr('button', 'aria-expanded')).toMatch(/true/i));

          case 6:
            _context3.next = 8;
            return regeneratorRuntime.awrap(expect(prop('core-toggle', 'hidden')).toMatch(/(null|false)/i));

          case 8:
            _context3.next = 10;
            return regeneratorRuntime.awrap($('button').click());

          case 10:
            _context3.next = 12;
            return regeneratorRuntime.awrap(expect(attr('button', 'aria-expanded')).toEqual('false'));

          case 12:
            _context3.next = 14;
            return regeneratorRuntime.awrap(expect(prop('core-toggle', 'hidden')).toMatch(/true/i));

          case 14:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
  it('opens and closes nested toggle', function _callee4() {
    return regeneratorRuntime.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <button id=\"outer\">Toggle outer</button>\n        <core-toggle hidden>\n          <button id=\"inner\">Toggle inner</button>\n          <core-toggle hidden>\n            <div>Inner content</div>\n          </core-toggle>\n        </core-toggle>\n      ";
            }));

          case 2:
            _context4.next = 4;
            return regeneratorRuntime.awrap($('button#outer').click());

          case 4:
            _context4.next = 6;
            return regeneratorRuntime.awrap($('button#inner').click());

          case 6:
            _context4.next = 8;
            return regeneratorRuntime.awrap(expect(prop('button#outer + core-toggle', 'hidden')).toMatch(/(null|false)/i));

          case 8:
            _context4.next = 10;
            return regeneratorRuntime.awrap(expect(prop('button#outer + core-toggle', 'hidden')).toMatch(/(null|false)/i));

          case 10:
            _context4.next = 12;
            return regeneratorRuntime.awrap($('button#inner').click());

          case 12:
            _context4.next = 14;
            return regeneratorRuntime.awrap(expect(prop('button#inner + core-toggle', 'hidden')).toMatch(/true/i));

          case 14:
            _context4.next = 16;
            return regeneratorRuntime.awrap(expect(prop('button#outer + core-toggle', 'hidden')).toMatch(/(null|false)/i));

          case 16:
            _context4.next = 18;
            return regeneratorRuntime.awrap($('button#outer').click());

          case 18:
            _context4.next = 20;
            return regeneratorRuntime.awrap(expect(prop('button#outer + core-toggle', 'hidden')).toMatch(/true/i));

          case 20:
          case "end":
            return _context4.stop();
        }
      }
    });
  });
  it('closes nested toggle with esc', function _callee5() {
    return regeneratorRuntime.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <button id=\"outer\">Toggle outer</button>\n        <core-toggle hidden>\n          <button id=\"inner\">Toggle inner</button>\n          <core-toggle hidden>\n            <div>Inner content</div>\n          </core-toggle>\n        </core-toggle>\n      ";
            }));

          case 2:
            _context5.next = 4;
            return regeneratorRuntime.awrap($('button#outer').click());

          case 4:
            _context5.next = 6;
            return regeneratorRuntime.awrap($('button#inner').click());

          case 6:
            _context5.next = 8;
            return regeneratorRuntime.awrap(expect(prop('button#outer + core-toggle', 'hidden')).toMatch(/(null|false)/i));

          case 8:
            _context5.next = 10;
            return regeneratorRuntime.awrap(expect(prop('button#outer + core-toggle', 'hidden')).toMatch(/(null|false)/i));

          case 10:
            _context5.next = 12;
            return regeneratorRuntime.awrap($('button#inner').sendKeys(protractor.Key.ESCAPE));

          case 12:
            _context5.next = 14;
            return regeneratorRuntime.awrap(expect(prop('button#inner + core-toggle', 'hidden')).toMatch(/true/i));

          case 14:
            _context5.next = 16;
            return regeneratorRuntime.awrap(expect(prop('button#outer + core-toggle', 'hidden')).toMatch(/(null|false)/i));

          case 16:
            _context5.next = 18;
            return regeneratorRuntime.awrap($('button#inner').sendKeys(protractor.Key.ESCAPE));

          case 18:
            _context5.next = 20;
            return regeneratorRuntime.awrap(expect(prop('button#outer + core-toggle', 'hidden')).toMatch(/true/i));

          case 20:
          case "end":
            return _context5.stop();
        }
      }
    });
  });
  it('closes popup on click outside', function _callee6() {
    return regeneratorRuntime.async(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <button>Toggle</button>\n        <core-toggle popup hidden></core-toggle>\n      ";
            }));

          case 2:
            _context6.next = 4;
            return regeneratorRuntime.awrap($('button').click());

          case 4:
            _context6.next = 6;
            return regeneratorRuntime.awrap(expect(prop('core-toggle', 'hidden')).toMatch(/(null|false)/i));

          case 6:
            _context6.next = 8;
            return regeneratorRuntime.awrap($('body').click());

          case 8:
            _context6.next = 10;
            return regeneratorRuntime.awrap(expect(prop('core-toggle', 'hidden')).toMatch(/true/i));

          case 10:
          case "end":
            return _context6.stop();
        }
      }
    });
  });
  it('respects "for" attribute', function _callee7() {
    var toggleId;
    return regeneratorRuntime.async(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <div><button for=\"content\">Toggle</button></div>\n        <core-toggle id=\"content\" hidden></core-toggle>\n      ";
            }));

          case 2:
            _context7.next = 4;
            return regeneratorRuntime.awrap(attr('core-toggle', 'id'));

          case 4:
            toggleId = _context7.sent;
            _context7.next = 7;
            return regeneratorRuntime.awrap(expect(attr('button', 'for')).toEqual(toggleId));

          case 7:
            _context7.next = 9;
            return regeneratorRuntime.awrap(expect(attr('button', 'aria-controls')).toEqual(toggleId));

          case 9:
          case "end":
            return _context7.stop();
        }
      }
    });
  });
  it('respects exisiting aria-label with popup and value', function _callee8() {
    var toggleValue;
    return regeneratorRuntime.async(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <button aria-label=\"Label\">Toggle</button>\n        <core-toggle popup=\"Another label\" hidden></core-toggle>\n      ";
            }));

          case 2:
            _context8.next = 4;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              return document.querySelector('core-toggle').value = 'Button text';
            }));

          case 4:
            _context8.next = 6;
            return regeneratorRuntime.awrap(prop('core-toggle', 'value'));

          case 6:
            toggleValue = _context8.sent;
            _context8.next = 9;
            return regeneratorRuntime.awrap(expect(prop('button', 'textContent')).toEqual(toggleValue));

          case 9:
            _context8.next = 11;
            return regeneratorRuntime.awrap(expect(attr('button', 'aria-label')).toEqual('Label'));

          case 11:
          case "end":
            return _context8.stop();
        }
      }
    });
  });
  it('sets aria-label with popup attr and value', function _callee9() {
    var toggleValue;
    return regeneratorRuntime.async(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <button>Toggle</button>\n        <core-toggle popup=\"Some label\" hidden></core-toggle>\n      ";
            }));

          case 2:
            _context9.next = 4;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              return document.querySelector('core-toggle').value = 'Button text';
            }));

          case 4:
            _context9.next = 6;
            return regeneratorRuntime.awrap(prop('core-toggle', 'value'));

          case 6:
            toggleValue = _context9.sent;
            _context9.next = 9;
            return regeneratorRuntime.awrap(expect(prop('button', 'textContent')).toEqual(toggleValue));

          case 9:
            _context9.next = 11;
            return regeneratorRuntime.awrap(expect(attr('button', 'aria-label')).toEqual('Button text,Some label'));

          case 11:
          case "end":
            return _context9.stop();
        }
      }
    });
  });
  it('sets aria-label with popup prop and value', function _callee10() {
    var toggleValue;
    return regeneratorRuntime.async(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <button>Toggle</button>\n        <core-toggle hidden></core-toggle>\n      ";
            }));

          case 2:
            _context10.next = 4;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              return document.querySelector('core-toggle').popup = 'Some label';
            }));

          case 4:
            _context10.next = 6;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              return document.querySelector('core-toggle').value = 'Button text';
            }));

          case 6:
            _context10.next = 8;
            return regeneratorRuntime.awrap(prop('core-toggle', 'value'));

          case 8:
            toggleValue = _context10.sent;
            _context10.next = 11;
            return regeneratorRuntime.awrap(expect(prop('button', 'textContent')).toEqual(toggleValue));

          case 11:
            _context10.next = 13;
            return regeneratorRuntime.awrap(expect(attr('button', 'aria-label')).toEqual('Button text,Some label'));

          case 13:
          case "end":
            return _context10.stop();
        }
      }
    });
  });
  it('triggers toggle event', function _callee11() {
    var triggered;
    return regeneratorRuntime.async(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <button>Toggle</button>\n        <core-toggle hidden></core-toggle>\n      ";
              document.addEventListener('toggle', function () {
                return window.triggered = true;
              });
              document.querySelector('core-toggle').hidden = false;
            }));

          case 2:
            _context11.next = 4;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              return window.triggered;
            }));

          case 4:
            triggered = _context11.sent;
            _context11.next = 7;
            return regeneratorRuntime.awrap(expect(triggered).toEqual(true));

          case 7:
          case "end":
            return _context11.stop();
        }
      }
    });
  });
  it('triggers select event', function _callee12() {
    var itemId;
    return regeneratorRuntime.async(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <button>Toggle</button>\n        <core-toggle hidden>\n          <button id=\"my-item\">Select me</button>\n        </core-toggle>\n      ";
            }));

          case 2:
            _context12.next = 4;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.addEventListener('toggle.select', function (event) {
                return window.itemId = event.detail.id;
              });
              var toggle = document.querySelector('core-toggle');
              toggle.hidden = false;
              toggle.children[0].click();
            }));

          case 4:
            _context12.next = 6;
            return regeneratorRuntime.awrap(browser.wait(function () {
              return browser.executeScript(function () {
                return window.itemId;
              });
            }));

          case 6:
            itemId = _context12.sent;
            _context12.next = 9;
            return regeneratorRuntime.awrap(expect(itemId).toEqual('my-item'));

          case 9:
          case "end":
            return _context12.stop();
        }
      }
    });
  });
});
