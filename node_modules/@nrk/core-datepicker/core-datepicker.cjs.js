'use strict';

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

var IS_BROWSER = typeof window !== 'undefined';
var IS_ANDROID = IS_BROWSER && /(android)/i.test(navigator.userAgent); // Bad, but needed

var IS_IOS = IS_BROWSER && /iPad|iPhone|iPod/.test(String(navigator.platform)); // Mock HTMLElement for Node

if (!IS_BROWSER && !global.HTMLElement) {
  global.HTMLElement =
  /*#__PURE__*/
  function () {
    function _class() {
      _classCallCheck(this, _class);
    }

    return _class;
  }();
}
/**
* addStyle
* @param {String} nodeName An unique ID of the event to bind - ensurnes single instance
* @param {String} css The css to inject
*/

function addStyle(nodeName, css) {
  var key = "style-".concat(nodeName.toLowerCase());
  var min = css.replace(/\/\*[^!][^*]*\*\//g, '').replace(/\s*(^|[:;,{}]|$)\s*/g, '$1');
  document.getElementById(key) || document.head.insertAdjacentHTML('afterbegin', "<style id=\"".concat(key, "\">").concat(min, "</style>"));
}
/**
* closest
* @param {Element} element Element to traverse up from
* @param {String} selector A selector to search for matching parents or element itself
* @return {Element|null}  Element which is the closest ancestor matching selector
*/

var closest = function () {
  var proto = typeof window === 'undefined' ? {} : window.Element.prototype;
  var match = proto.matches || proto.msMatchesSelector || proto.webkitMatchesSelector;
  return proto.closest ? function (el, css) {
    return el.closest(css);
  } : function (el, css) {
    // IE jumps to shadow SVG DOM on clicking an SVG defined by <use>.
    // If so, jump back to <use> element and traverse real DOM
    if (el.correspondingUseElement) el = el.correspondingUseElement;

    for (; el; el = el.parentElement) {
      if (match.call(el, css)) return el;
    }

    return null;
  };
}();
/**
* dispatchEvent - with infinite loop prevention
* @param {Element} elem The target object
* @param {String} name The source object(s)
* @param {Object} detail Detail object (bubbles and cancelable is set to true)
* @return {Boolean} Whether the event was canceled
*/

function dispatchEvent(element, name) {
  var detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var ignore = "prevent_recursive_dispatch_maximum_callstack".concat(name);
  var event;
  if (element[ignore]) return true; // We are already processing this event, so skip sending a new one
  else element[ignore] = true; // Add name to dispatching ignore

  if (typeof window.CustomEvent === 'function') {
    event = new window.CustomEvent(name, {
      bubbles: true,
      cancelable: true,
      detail: detail
    });
  } else {
    event = document.createEvent('CustomEvent');
    event.initCustomEvent(name, true, true, detail);
  } // IE reports incorrect event.defaultPrevented
  // but correct return value on element.dispatchEvent


  var result = element.dispatchEvent(event);
  element[ignore] = null; // Remove name from dispatching ignore

  return result; // Follow W3C standard for return value
}
/**
 * toggleAttribute (Ponyfill for IE and Edge, fixes #299)
 * @link https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute
 * @param {Element} el  Single DOM Element
 * @param {String} name The name of the attribute to be toggled
 * @param {Boolean} force Force attribute to be added or removed regardless of previous state
 */

function toggleAttribute(el, name) {
  var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !this.hasAttribute(name);
  if (!force === el.hasAttribute(name)) el[force ? 'setAttribute' : 'removeAttribute'](name, '');
  return force;
}
/**
* queryAll
* @param {String|NodeList|Array|Element} elements A CSS selector string, nodeList, element array, or single element
* @param {Element} context Node to look for elements within
* @return {Element[]} Array of elements
*/

function queryAll(elements) {
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;

  if (elements) {
    if (elements.nodeType) return [elements];
    if (typeof elements === 'string') return [].slice.call(context.querySelectorAll(elements));
    if (elements.length) return [].slice.call(elements);
  }

  return [];
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var index_min = createCommonjsModule(function (module, exports) {
  !function (e, t) {
     module.exports = t() ;
  }(commonjsGlobal, function () {

    var D = {
      year: "FullYear",
      month: "Month",
      week: "Date",
      day: "Date",
      hour: "Hours",
      minute: "Minutes",
      second: "Seconds"
    },
        w = /([+-]\s*\d+)\s*(second|minute|hour|day|week|month|year)|(mon)|(tue)|(wed)|(thu)|(fri)|(sat)|(sun)/g,
        M = /([-\dy]+)[-/.]([\dm]+)[-/.]([\dd]+)/,
        p = /([\dh]+):([\dm]+):?([\ds]+)?/;
    return function (e, t) {
      if (isFinite(e)) return new Date(Number(e));
      var n = String(e).toLowerCase(),
          r = new Date(isFinite(t) && -1 === n.indexOf("now") ? Number(t) : Date.now()),
          a = n.match(M) || [],
          o = a[1];
      void 0 === o && (o = "y");
      var i = a[2];
      void 0 === i && (i = "m");
      var s = a[3];
      void 0 === s && (s = "d");
      var d = n.match(p) || [],
          u = d[1];
      void 0 === u && (u = "h");
      var h = d[2];
      void 0 === h && (h = "m");
      var m = d[3];
      void 0 === m && (m = "s");
      var c = {
        year: o,
        month: i,
        day: s,
        hour: u,
        minute: h,
        second: m
      };
      Object.keys(c).forEach(function (e) {
        var t = "month" === e ? 1 : 0,
            a = String(r["get" + D[e]]() + t);
        c[e] = c[e].replace(/[^-\d]+/g, function (e, t, n) {
          return t ? a.substr(a.length - n.length + t, e.length) : a.substr(0, Math.max(0, a.length - n.length + e.length));
        }) - t;
      });
      var f = new Date(c.year, Math.min(12, c.month + 1), 0).getDate();

      for (r.setFullYear(c.year, Math.min(11, c.month), Math.max(1, Math.min(f, c.day))), r.setHours(Math.min(24, c.hour), Math.min(59, c.minute), Math.min(59, c.second)); null !== (c = w.exec(n));) {
        var g = c[2],
            l = String(c[1]).replace(/\s/g, "") * ("week" === g ? 7 : 1),
            v = c.slice(2).indexOf(c[0]),
            y = r.getDate();
        g ? r["set" + D[g]](r["get" + D[g]]() + l) : r.setDate(r.getDate() - (r.getDay() || 7) + v), "month" !== g && "year" !== g || y === r.getDate() || r.setDate(0);
      }

      return r;
    };
  });
});

var MASK = {
  year: '*-m-d',
  month: 'y-*-d',
  day: 'y-m-*',
  hour: '*:m',
  minute: 'h:*',
  second: 'h:m:*',
  timestamp: '*',
  "null": '*'
};
var KEYS = {
  33: '-1month',
  34: '+1month',
  35: 'y-m-99',
  36: 'y-m-1',
  37: '-1day',
  38: '-1week',
  39: '+1day',
  40: '+1week'
};
var MONTHS = 'januar,februar,mars,april,mai,juni,juli,august,september,oktober,november,desember';
var DAYS = 'man,tirs,ons,tors,fre,lør,søn';

var CoreDatepicker =
/*#__PURE__*/
function (_HTMLElement) {
  _inherits(CoreDatepicker, _HTMLElement);

  function CoreDatepicker() {
    _classCallCheck(this, CoreDatepicker);

    return _possibleConstructorReturn(this, _getPrototypeOf(CoreDatepicker).apply(this, arguments));
  }

  _createClass(CoreDatepicker, [{
    key: "connectedCallback",
    value: function connectedCallback() {
      var _this = this;

      this._date = this.date; // Store for later comparison and speeding up things

      document.addEventListener('click', this);
      document.addEventListener('change', this);
      document.addEventListener('keydown', this);
      setTimeout(function () {
        return _this.attributeChangedCallback();
      }); // Render after children is parsed

      addStyle(this.nodeName, "".concat(this.nodeName, "{display:block}")); //  default to display block
    }
  }, {
    key: "disconnectedCallback",
    value: function disconnectedCallback() {
      this._date = this._disabled = null; // Garbage collection

      document.removeEventListener('click', this);
      document.removeEventListener('change', this);
      document.removeEventListener('keydown', this);
    }
  }, {
    key: "attributeChangedCallback",
    value: function attributeChangedCallback() {
      if (!this._date) return; // Only render after connectedCallback

      if (this.disabled(this.date) && !this.disabled(this._date)) return this.date = this._date; // Jump back

      if (this.diff(this.date)) dispatchEvent(this, 'datepicker.change', this._date = this.date);
      forEach('button', this, button);
      forEach('select', this, select);
      forEach('input', this, input);
      forEach('table', this, table);
    }
  }, {
    key: "handleEvent",
    value: function handleEvent(event) {
      if (event.defaultPrevented || event.ctrlKey || event.metaKey || event.shiftKey || event.altKey || event.type === 'keydown' && !KEYS[event.keyCode]) return;
      if (!this.contains(event.target) && !closest(event.target, "[for=\"".concat(this.id, "\"]"))) return;
      if (event.type === 'change') this.date = MASK[event.target.getAttribute('data-type')].replace('*', event.target.value);else if (event.type === 'click') {
        var _button = closest(event.target, 'button[value]');

        var _table = closest(event.target, 'table');

        if (_button) this.date = _button.value;
        if (_button && _table) dispatchEvent(this, 'datepicker.click.day');
      } else if (event.type === 'keydown' && closest(event.target, 'table')) {
        this.date = KEYS[event.keyCode];
        this.querySelector('[autofocus]').focus();
        event.preventDefault(); // Prevent scrolling
      }
    }
  }, {
    key: "diff",
    value: function diff(val) {
      return this.parse(val).getTime() - this.timestamp;
    }
  }, {
    key: "parse",
    value: function parse(val, from) {
      return index_min(val, from || this._date);
    }
  }, {
    key: "disabled",
    get: function get() {
      return this._disabled || Function.prototype;
    },
    set: function set(fn) {
      var _this2 = this;

      this._disabled = typeof fn === 'function' ? function (val) {
        return fn(_this2.parse(val), _this2);
      } : function () {
        return fn;
      }; // Auto parse dates

      this.attributeChangedCallback(); // Re-render
    }
  }, {
    key: "timestamp",
    get: function get() {
      return String(this._date.getTime());
    } // Stringify for consistency and for truthy '0'

  }, {
    key: "year",
    get: function get() {
      return String(this._date.getFullYear());
    }
  }, {
    key: "month",
    get: function get() {
      return pad(this._date.getMonth() + 1);
    }
  }, {
    key: "day",
    get: function get() {
      return pad(this._date.getDate());
    }
  }, {
    key: "hour",
    get: function get() {
      return pad(this._date.getHours());
    }
  }, {
    key: "minute",
    get: function get() {
      return pad(this._date.getMinutes());
    }
  }, {
    key: "second",
    get: function get() {
      return pad(this._date.getSeconds());
    }
  }, {
    key: "date",
    get: function get() {
      return index_min(this.getAttribute('timestamp') || this._date || Date.now());
    },
    set: function set(val) {
      return this.setAttribute('timestamp', this.parse(val).getTime());
    }
  }, {
    key: "months",
    set: function set(val) {
      this.setAttribute('months', [].concat(val).join(','));
    },
    get: function get() {
      return (this.getAttribute('months') || MONTHS).split(/\s*,\s*/);
    }
  }, {
    key: "days",
    set: function set(val) {
      this.setAttribute('days', [].concat(val).join(','));
    },
    get: function get() {
      return (this.getAttribute('days') || DAYS).split(/\s*,\s*/);
    }
  }], [{
    key: "observedAttributes",
    get: function get() {
      return ['timestamp', 'months', 'days'];
    }
  }]);

  return CoreDatepicker;
}(_wrapNativeSuper(HTMLElement));

var pad = function pad(val) {
  return "0".concat(val).slice(-2);
};

var forEach = function forEach(css, self, fn) {
  return [].forEach.call(document.getElementsByTagName(css), function (el) {
    if (self.contains(el) || self.id === el.getAttribute(self.external)) fn(self, el);
  });
};

function button(self, el) {
  if (!el.value) return; // Skip buttons without a set value

  el.type = 'button'; // Ensure forms are not submitted by datepicker-buttons

  el.disabled = self.disabled(el.value);
}

function input(self, el) {
  var type = el.getAttribute('data-type') || el.getAttribute('type');

  if (type === 'radio' || type === 'checkbox') {
    el.disabled = self.disabled(el.value);
    el.checked = !self.diff(el.value);
  } else if (MASK[type]) {
    el.setAttribute('type', 'number'); // Set input type to number

    el.setAttribute('data-type', type); // And store original type

    el.value = self[type];
  }
}

function table(self, table) {
  if (!table.firstElementChild) {
    table.innerHTML = "\n    <caption></caption><thead><tr>".concat(Array(8).join('</th><th>'), "</tr></thead>\n    <tbody>").concat(Array(7).join("<tr>".concat(Array(8).join('<td><button type="button"></button></td>'), "</tr>")), "</tbody>");
  }

  var today = new Date();
  var month = self.date.getMonth();
  var day = self.parse('y-m-1 mon'); // Monday in first week of month

  table.caption.textContent = "".concat(self.months[month], ", ").concat(self.year);
  queryAll('th', table).forEach(function (th, day) {
    return th.textContent = self.days[day];
  });
  queryAll('button', table).forEach(function (button) {
    var isSelected = !self.diff(day);
    var dayInMonth = day.getDate();
    var dayMonth = day.getMonth();
    button.textContent = dayInMonth; // Set textContent instead of innerHTML avoids reflow

    button.value = "".concat(day.getFullYear(), "-").concat(dayMonth + 1, "-").concat(dayInMonth);
    button.disabled = self.disabled(day);
    button.tabIndex = isSelected - 1;
    button.setAttribute('data-adjacent', month !== dayMonth);
    button.setAttribute('aria-label', "".concat(dayInMonth, ". ").concat(self.months[dayMonth]));
    button.setAttribute('aria-current', day.getDate() === today.getDate() && day.getMonth() === today.getMonth() && day.getFullYear() === today.getFullYear() && 'date');
    toggleAttribute(button, 'autofocus', isSelected);
    day.setDate(dayInMonth + 1);
  });
}

function select(self, select) {
  if (!select.firstElementChild) {
    select._autofill = true;
    select.innerHTML = self.months.map(function (name, month) {
      return "<option value=\"y-".concat(month + 1, "-d\"></option>");
    }).join('');
  }

  queryAll(select.children).forEach(function (option, month) {
    if (select._autofill) option.textContent = self.months[month];
    option.disabled = self.disabled(option.value);
    option.selected = !self.diff(option.value);
  });
}

module.exports = CoreDatepicker;
