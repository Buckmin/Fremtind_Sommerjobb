'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fs = _interopDefault(require('fs'));
var path = _interopDefault(require('path'));

function prop(selector, name) {
  return browser.executeScript(function (selector, name) {
    return String((document.querySelector(selector) || {})[name]);
  }, selector, name);
}
function attr(selector, name) {
  return browser.executeScript(function (selector, name) {
    return String(document.querySelector(selector).getAttribute(name));
  }, selector, name);
}

var coreDatepicker = fs.readFileSync(path.resolve(__dirname, 'core-datepicker.min.js'), 'utf-8');
var customElements = fs.readFileSync(require.resolve('@webcomponents/custom-elements'), 'utf-8');

var pad = function pad(val) {
  return "0".concat(val).slice(-2);
};

describe('core-datepicker', function () {
  beforeEach(function _callee() {
    return regeneratorRuntime.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return regeneratorRuntime.awrap(browser.refresh());

          case 2:
            _context.next = 4;
            return regeneratorRuntime.awrap(browser.executeScript(customElements));

          case 4:
            _context.next = 6;
            return regeneratorRuntime.awrap(browser.executeScript(coreDatepicker));

          case 6:
          case "end":
            return _context.stop();
        }
      }
    });
  });
  it('sets up properties', function _callee2() {
    var hour;
    return regeneratorRuntime.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <core-datepicker timestamp=\"".concat(new Date('2019-04-30T12:44:56Z').getTime(), "\">\n        </core-datepicker>\n      ");
            }));

          case 2:
            _context2.next = 4;
            return regeneratorRuntime.awrap(expect(prop('core-datepicker', 'year')).toEqual('2019'));

          case 4:
            _context2.next = 6;
            return regeneratorRuntime.awrap(expect(prop('core-datepicker', 'month')).toEqual('04'));

          case 6:
            _context2.next = 8;
            return regeneratorRuntime.awrap(expect(prop('core-datepicker', 'day')).toEqual('30'));

          case 8:
            _context2.next = 10;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              return new Date('2019-04-30T12:44:56Z').getHours();
            }));

          case 10:
            hour = _context2.sent;
            _context2.next = 13;
            return regeneratorRuntime.awrap(expect(prop('core-datepicker', 'hour')).toEqual(pad(String(hour))));

          case 13:
            _context2.next = 15;
            return regeneratorRuntime.awrap(expect(prop('core-datepicker', 'minute')).toEqual('44'));

          case 15:
            _context2.next = 17;
            return regeneratorRuntime.awrap(expect(prop('core-datepicker', 'second')).toEqual('56'));

          case 17:
            _context2.next = 19;
            return regeneratorRuntime.awrap(expect(prop('core-datepicker', 'days')).toEqual('man,tirs,ons,tors,fre,lør,søn'));

          case 19:
            _context2.next = 21;
            return regeneratorRuntime.awrap(expect(prop('core-datepicker', 'months')).toEqual('januar,februar,mars,april,mai,juni,juli,august,september,oktober,november,desember'));

          case 21:
          case "end":
            return _context2.stop();
        }
      }
    });
  });
  it('sets input values from timestamp', function _callee3() {
    var hours, timestamp;
    return regeneratorRuntime.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <core-datepicker timestamp=\"".concat(new Date('2019-04-30T10:44:56Z').getTime(), "\">\n          <input type=\"year\">\n          <input type=\"month\">\n          <input type=\"day\">\n          <input type=\"hour\">\n          <input type=\"minute\">\n          <input type=\"second\">\n          <input type=\"timestamp\">\n        </core-datepicker>\n      ");
            }));

          case 2:
            _context3.next = 4;
            return regeneratorRuntime.awrap(expect(prop('input[data-type="year"]', 'value')).toEqual('2019'));

          case 4:
            _context3.next = 6;
            return regeneratorRuntime.awrap(expect(prop('input[data-type="year"]', 'type')).toEqual('number'));

          case 6:
            _context3.next = 8;
            return regeneratorRuntime.awrap(expect(prop('input[data-type="month"]', 'value')).toEqual('04'));

          case 8:
            _context3.next = 10;
            return regeneratorRuntime.awrap(expect(prop('input[data-type="month"]', 'type')).toEqual('number'));

          case 10:
            _context3.next = 12;
            return regeneratorRuntime.awrap(expect(prop('input[data-type="day"]', 'value')).toEqual('30'));

          case 12:
            _context3.next = 14;
            return regeneratorRuntime.awrap(expect(prop('input[data-type="day"]', 'type')).toEqual('number'));

          case 14:
            _context3.next = 16;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              return new Date('2019-04-30T10:44:56Z').getHours();
            }));

          case 16:
            hours = _context3.sent;
            _context3.next = 19;
            return regeneratorRuntime.awrap(expect(prop('input[data-type="hour"]', 'value')).toEqual(pad(String(hours))));

          case 19:
            _context3.next = 21;
            return regeneratorRuntime.awrap(expect(prop('input[data-type="hour"]', 'type')).toEqual('number'));

          case 21:
            _context3.next = 23;
            return regeneratorRuntime.awrap(expect(prop('input[data-type="minute"]', 'value')).toEqual('44'));

          case 23:
            _context3.next = 25;
            return regeneratorRuntime.awrap(expect(prop('input[data-type="minute"]', 'type')).toEqual('number'));

          case 25:
            _context3.next = 27;
            return regeneratorRuntime.awrap(expect(prop('input[data-type="second"]', 'value')).toEqual('56'));

          case 27:
            _context3.next = 29;
            return regeneratorRuntime.awrap(expect(prop('input[data-type="second"]', 'type')).toEqual('number'));

          case 29:
            _context3.next = 31;
            return regeneratorRuntime.awrap(prop('core-datepicker', 'timestamp'));

          case 31:
            timestamp = _context3.sent;
            _context3.next = 34;
            return regeneratorRuntime.awrap(expect(prop('input[data-type="timestamp"]', 'value')).toEqual(timestamp));

          case 34:
            _context3.next = 36;
            return regeneratorRuntime.awrap(expect(prop('input[data-type="timestamp"]', 'type')).toEqual('number'));

          case 36:
          case "end":
            return _context3.stop();
        }
      }
    });
  });
  it('populates empty select with months', function _callee4() {
    var i;
    return regeneratorRuntime.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <core-datepicker>\n          <select></select>\n        </core-datepicker>\n      ";
            }));

          case 2:
            _context4.next = 4;
            return regeneratorRuntime.awrap(browser.wait(ExpectedConditions.presenceOf($('core-datepicker select option'))));

          case 4:
            _context4.next = 6;
            return regeneratorRuntime.awrap(expect(prop('core-datepicker select', 'childElementCount')).toEqual('12'));

          case 6:
            i = 1;

          case 7:
            if (!(i <= 12)) {
              _context4.next = 13;
              break;
            }

            _context4.next = 10;
            return regeneratorRuntime.awrap(expect(prop("option:nth-child(".concat(i, ")"), 'value')).toEqual("y-".concat(i, "-d")));

          case 10:
            i++;
            _context4.next = 7;
            break;

          case 13:
            _context4.next = 15;
            return regeneratorRuntime.awrap(expect(prop('option:nth-child(1)', 'textContent')).toEqual('januar'));

          case 15:
            _context4.next = 17;
            return regeneratorRuntime.awrap(expect(prop('option:nth-child(2)', 'textContent')).toEqual('februar'));

          case 17:
            _context4.next = 19;
            return regeneratorRuntime.awrap(expect(prop('option:nth-child(3)', 'textContent')).toEqual('mars'));

          case 19:
            _context4.next = 21;
            return regeneratorRuntime.awrap(expect(prop('option:nth-child(4)', 'textContent')).toEqual('april'));

          case 21:
            _context4.next = 23;
            return regeneratorRuntime.awrap(expect(prop('option:nth-child(5)', 'textContent')).toEqual('mai'));

          case 23:
            _context4.next = 25;
            return regeneratorRuntime.awrap(expect(prop('option:nth-child(6)', 'textContent')).toEqual('juni'));

          case 25:
            _context4.next = 27;
            return regeneratorRuntime.awrap(expect(prop('option:nth-child(7)', 'textContent')).toEqual('juli'));

          case 27:
            _context4.next = 29;
            return regeneratorRuntime.awrap(expect(prop('option:nth-child(8)', 'textContent')).toEqual('august'));

          case 29:
            _context4.next = 31;
            return regeneratorRuntime.awrap(expect(prop('option:nth-child(9)', 'textContent')).toEqual('september'));

          case 31:
            _context4.next = 33;
            return regeneratorRuntime.awrap(expect(prop('option:nth-child(10)', 'textContent')).toEqual('oktober'));

          case 33:
            _context4.next = 35;
            return regeneratorRuntime.awrap(expect(prop('option:nth-child(11)', 'textContent')).toEqual('november'));

          case 35:
            _context4.next = 37;
            return regeneratorRuntime.awrap(expect(prop('option:nth-child(12)', 'textContent')).toEqual('desember'));

          case 37:
          case "end":
            return _context4.stop();
        }
      }
    });
  });
  it('re-uses custom select', function _callee5() {
    return regeneratorRuntime.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <core-datepicker>\n          <select>\n            <option>---</option>\n            <option value=\"2016-m-d\">Set year to 2016</option>\n            <option value=\"19yy-1-1\">Back 100 years and set to January 1st.</option>\n            <option value=\"1985-12-19\">December 19, 1985</option>\n          </select>\n        </core-datepicker>\n      ";
            }));

          case 2:
            _context5.next = 4;
            return regeneratorRuntime.awrap(expect(prop('select', 'childElementCount')).toEqual('4'));

          case 4:
            _context5.next = 6;
            return regeneratorRuntime.awrap(expect(prop('option:nth-child(1)', 'value')).toEqual('---'));

          case 6:
            _context5.next = 8;
            return regeneratorRuntime.awrap(expect(prop('option:nth-child(2)', 'value')).toEqual('2016-m-d'));

          case 8:
            _context5.next = 10;
            return regeneratorRuntime.awrap(expect(prop('option:nth-child(3)', 'value')).toEqual('19yy-1-1'));

          case 10:
          case "end":
            return _context5.stop();
        }
      }
    });
  });
  it('populates empty table', function _callee6() {
    var days, i;
    return regeneratorRuntime.async(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <core-datepicker timestamp=\"".concat(new Date('2019-01-01T12:00:00Z').getTime(), "\">\n          <table></table>\n        </core-datepicker>\n      ");
            }));

          case 2:
            _context6.next = 4;
            return regeneratorRuntime.awrap(browser.wait(ExpectedConditions.presenceOf($('core-datepicker table button'))));

          case 4:
            _context6.next = 6;
            return regeneratorRuntime.awrap(prop('core-datepicker', 'days'));

          case 6:
            days = _context6.sent.split(',');
            _context6.next = 9;
            return regeneratorRuntime.awrap(expect(days.length).toEqual(7));

          case 9:
            i = 1;

          case 10:
            if (!(i <= 7)) {
              _context6.next = 16;
              break;
            }

            _context6.next = 13;
            return regeneratorRuntime.awrap(expect(prop("thead tr th:nth-child(".concat(i, ")"), 'textContent')).toEqual(days[i - 1]));

          case 13:
            i++;
            _context6.next = 10;
            break;

          case 16:
            _context6.next = 18;
            return regeneratorRuntime.awrap(expect($$('table td button[data-adjacent="false"]').count()).toEqual(31));

          case 18:
            _context6.next = 20;
            return regeneratorRuntime.awrap(expect(prop('button[autofocus]', 'textContent')).toEqual('1'));

          case 20:
          case "end":
            return _context6.stop();
        }
      }
    });
  });
  it('marks today\'s date in table', function _callee7() {
    var browserDate;
    return regeneratorRuntime.async(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <core-datepicker timestamp=\"".concat(new Date().getTime(), "\">\n          <table></table>\n        </core-datepicker>\n      ");
            }));

          case 2:
            _context7.next = 4;
            return regeneratorRuntime.awrap(browser.wait(ExpectedConditions.presenceOf($('core-datepicker table button'))));

          case 4:
            _context7.next = 6;
            return regeneratorRuntime.awrap(expect($('button[aria-current="date"]').isPresent()).toEqual(true));

          case 6:
            _context7.next = 8;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              return new Date().getDate();
            }));

          case 8:
            browserDate = _context7.sent;
            _context7.next = 11;
            return regeneratorRuntime.awrap(expect(prop('button[aria-current="date"]', 'textContent')).toEqual(String(browserDate)));

          case 11:
          case "end":
            return _context7.stop();
        }
      }
    });
  });
  it('changes date on day clicked', function _callee8() {
    return regeneratorRuntime.async(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <core-datepicker timestamp=\"".concat(new Date('2019-01-01T12:00:00Z').getTime(), "\">\n          <table></table>\n        </core-datepicker>\n      ");
            }));

          case 2:
            _context8.next = 4;
            return regeneratorRuntime.awrap(browser.wait(ExpectedConditions.presenceOf($('core-datepicker table button'))));

          case 4:
            _context8.next = 6;
            return regeneratorRuntime.awrap(expect(prop('button[autofocus]', 'textContent')).toEqual('1'));

          case 6:
            _context8.next = 8;
            return regeneratorRuntime.awrap($('tbody tr:nth-child(2) td:nth-child(5) button').click());

          case 8:
            _context8.next = 10;
            return regeneratorRuntime.awrap(expect(prop('button[autofocus]', 'textContent')).toEqual('11'));

          case 10:
          case "end":
            return _context8.stop();
        }
      }
    });
  });
  it('changes month names', function _callee9() {
    var months, i;
    return regeneratorRuntime.async(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            months = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'oktober', 'november', 'december'];
            _context9.next = 3;
            return regeneratorRuntime.awrap(browser.executeScript(function (months) {
              document.body.innerHTML = "\n        <core-datepicker months=\"".concat(months.join(), "\">\n          <select></select>\n        </core-datepicker>\n      ");
            }, months));

          case 3:
            _context9.next = 5;
            return regeneratorRuntime.awrap(browser.wait(ExpectedConditions.presenceOf($('core-datepicker select option'))));

          case 5:
            _context9.next = 7;
            return regeneratorRuntime.awrap(expect(prop('select', 'childElementCount')).toEqual('12'));

          case 7:
            i = 1;

          case 8:
            if (!(i <= 12)) {
              _context9.next = 14;
              break;
            }

            _context9.next = 11;
            return regeneratorRuntime.awrap(expect(prop("option:nth-child(".concat(i, ")"), 'textContent')).toEqual(months[i - 1]));

          case 11:
            i++;
            _context9.next = 8;
            break;

          case 14:
          case "end":
            return _context9.stop();
        }
      }
    });
  });
  it('changes day names', function _callee10() {
    var days, i;
    return regeneratorRuntime.async(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            days = ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu'];
            _context10.next = 3;
            return regeneratorRuntime.awrap(browser.executeScript(function (days) {
              document.body.innerHTML = "\n        <core-datepicker days=\"".concat(days.join(), "\">\n          <table></table>\n        </core-datepicker>\n      ");
            }, days));

          case 3:
            _context10.next = 5;
            return regeneratorRuntime.awrap(browser.wait(ExpectedConditions.presenceOf($('core-datepicker table thead'))));

          case 5:
            _context10.next = 7;
            return regeneratorRuntime.awrap(expect(prop('table thead tr', 'childElementCount')).toEqual('7'));

          case 7:
            i = 1;

          case 8:
            if (!(i <= 7)) {
              _context10.next = 14;
              break;
            }

            _context10.next = 11;
            return regeneratorRuntime.awrap(expect(prop("thead tr th:nth-child(".concat(i, ")"), 'textContent')).toEqual(days[i - 1]));

          case 11:
            i++;
            _context10.next = 8;
            break;

          case 14:
          case "end":
            return _context10.stop();
        }
      }
    });
  });
  it('disables elements from function', function _callee11() {
    return regeneratorRuntime.async(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <core-datepicker timestamp=\"".concat(new Date('2019-01-01T12:00:00Z').getTime(), "\">\n          <table></table>\n        </core-datepicker>\n      ");

              document.querySelector('core-datepicker').disabled = function (date) {
                return date > new Date('2019-01-01T12:00:00Z');
              };
            }));

          case 2:
            _context11.next = 4;
            return regeneratorRuntime.awrap(browser.wait(ExpectedConditions.presenceOf($('core-datepicker table button'))));

          case 4:
            _context11.next = 6;
            return regeneratorRuntime.awrap(expect(attr('tbody tr:nth-child(1) td:nth-child(1) button', 'disabled')).toMatch(/(null|false)/i));

          case 6:
            _context11.next = 8;
            return regeneratorRuntime.awrap(expect($('button:not(disabled)[value="2018-12-31"]').isPresent()).toBeTruthy());

          case 8:
            _context11.next = 10;
            return regeneratorRuntime.awrap(expect($('button:not(disabled)[value="2019-1-1"]').isPresent()).toBeTruthy());

          case 10:
            _context11.next = 12;
            return regeneratorRuntime.awrap(expect($('button:disabled[value="2019-1-2"]').isPresent()).toBeTruthy());

          case 12:
          case "end":
            return _context11.stop();
        }
      }
    });
  });
  it('triggers change event', function _callee12() {
    var time;
    return regeneratorRuntime.async(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <core-datepicker timestamp=\"".concat(new Date('2019-01-01T12:00:00Z').getTime(), "\">\n        </core-datepicker>\n      ");
              document.addEventListener('datepicker.change', function (event) {
                return window.time = event.detail.getTime();
              });
              document.querySelector('core-datepicker').date = new Date('2019-01-02T12:00:00Z');
            }));

          case 2:
            _context12.next = 4;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              return new Date('2019-01-02T12:00:00Z').getTime();
            }));

          case 4:
            time = _context12.sent;
            _context12.next = 7;
            return regeneratorRuntime.awrap(expect(browser.executeScript(function () {
              return window.time;
            })).toEqual(time));

          case 7:
          case "end":
            return _context12.stop();
        }
      }
    });
  });
  it('triggers click day event', function _callee13() {
    return regeneratorRuntime.async(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            _context13.next = 2;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.body.innerHTML = "\n        <core-datepicker timestamp=\"".concat(new Date().getTime(), "\">\n          <table></table>\n        </core-datepicker>\n      ");
            }));

          case 2:
            _context13.next = 4;
            return regeneratorRuntime.awrap(browser.wait(ExpectedConditions.presenceOf($('core-datepicker table button'))));

          case 4:
            _context13.next = 6;
            return regeneratorRuntime.awrap(browser.executeScript(function () {
              document.addEventListener('datepicker.click.day', function () {
                return window.triggered = true;
              });
              document.querySelector('core-datepicker button').click();
            }));

          case 6:
            _context13.next = 8;
            return regeneratorRuntime.awrap(expect(browser.executeScript(function () {
              return window.triggered;
            })).toEqual(true));

          case 8:
          case "end":
            return _context13.stop();
        }
      }
    });
  });
});
